{
  "初始化 semi 页面": {
    "scope": "typescript,typescriptreact",
    "prefix": "semi",
    "body": [
      "import { Page, Query, Table } from '@/components';",
      "import { usePagination } from '@/hooks';",
      "import { Button, Form, Popconfirm } from '@douyinfe/semi-ui';",
      "import { FormApi } from '@douyinfe/semi-ui/lib/es/form';",
      "import { ColumnProps } from '@douyinfe/semi-ui/lib/es/table';",
      "import { useNavigate } from '@edenx/runtime/router';",
      "import { useRequest } from 'ahooks';",
      "import dayjs from 'dayjs';",
      "import { useRef, useState } from 'react';",
      "",
      "const { RadioGroup, Radio, Select, Input } = Form;",
      "",
      "type Props = {",
      "  test: string;",
      "};",
      "",
      "type Item = {",
      "  name: number;",
      "  version: string;",
      "  category: string;",
      "  status: string;",
      "  createTime: string;",
      "  creator: string;",
      "};",
      "",
      "const mockData = Array.from(Array(15).fill(0)).map((_, i) => ({",
      "  name: i + 1,",
      "  version: '1.0.i',",
      "  category: '发布中',",
      "  status: '三灰',",
      "  createTime: Date.now().toString(),",
      "  creator: '李小龙',",
      "}));",
      "",
      "const getData = ({",
      "  currentPage,",
      "  pageSize,",
      "}: {",
      "  currentPage: number;",
      "  pageSize: number;",
      "}): Promise<{ list: Item[]; total: number }> =>",
      "  new Promise(resolve => {",
      "    setTimeout(() => {",
      "      const res = {",
      "        list: mockData.slice((currentPage - 1) * pageSize, currentPage * pageSize),",
      "        total: mockData.length,",
      "      };",
      "      resolve(res);",
      "    }, 1000);",
      "  });",
      "",
      "const App: React.FC<Props> = ({}) => {",
      "  const [query, setQuery] = useState<Query>();",
      "  const pagination = usePagination([query]);",
      "  const { currentPage, pageSize } = pagination;",
      "  const queryFormApi = useRef<FormApi>();",
      "  const navigate = useNavigate();",
      "",
      "  const { data, loading } = useRequest(() => getData({ pageSize, currentPage }), {",
      "    refreshDeps: [currentPage, pageSize, query],",
      "  });",
      "",
      "  const edit = async (row: Item) => {};",
      "",
      "  const handleDelete = async (row: Item) => {};",
      "",
      "  const columns: ColumnProps<Item>[] = [",
      "    {",
      "      title: '宿主',",
      "      dataIndex: 'name',",
      "    },",
      "    {",
      "      title: '宿主版本',",
      "      dataIndex: 'version',",
      "    },",
      "    {",
      "      title: '分类',",
      "      dataIndex: 'category',",
      "    },",
      "    {",
      "      title: '状态',",
      "      dataIndex: 'status',",
      "    },",
      "    {",
      "      title: '创建时间',",
      "      render: (_, row) => dayjs(row.createTime).format('YYYY-MM-DD HH:mm'),",
      "    },",
      "    {",
      "      title: '创建人',",
      "      dataIndex: 'creator',",
      "    },",
      "    {",
      "      title: '操作',",
      "      fixed: 'right',",
      "      width: 250,",
      "      render: (_, row) => (",
      "        <div className=\"flex gap-3\">",
      "          <Button theme=\"solid\" onClick={() => navigate('')}>",
      "            跳转",
      "          </Button>",
      "          <Button theme=\"solid\" onClick={() => edit(row)}>",
      "            编辑",
      "          </Button>",
      "          <Popconfirm title=\"确认要删除吗？\" onConfirm={() => handleDelete(row)}>",
      "            <Button>删除</Button>",
      "          </Popconfirm>",
      "        </div>",
      "      ),",
      "    },",
      "  ];",
      "",
      "  return (",
      "    <Page title=\"测试页面\">",
      "      <header className=\"flex justify-between\">",
      "        <Form",
      "          getFormApi={formApi => (queryFormApi.current = formApi)}",
      "          layout=\"horizontal\"",
      "          labelPosition=\"left\"",
      "          onValueChange={value => setQuery(value)}",
      "          className=\"flex gap-10\"",
      "        >",
      "          <Select field=\"app\" label=\"宿主\" rules={[{ required: true, message: '请选择宿主' }]} className=\"w-full\">",
      "            <Select.Option value={0}>抖音</Select.Option>",
      "            <Select.Option value={1}>抖极</Select.Option>",
      "            <Select.Option value={2}>抖音、极速</Select.Option>",
      "          </Select>",
      "        </Form>",
      "      </header>",
      "      <Table",
      "        className=\"mt-5\"",
      "        loading={loading}",
      "        dataSource={data?.list}",
      "        columns={columns}",
      "        total={data?.total}",
      "        pagination={pagination}",
      "      />",
      "    </Page>",
      "  );",
      "};",
      "",
      "export default App;",
      ""
    ]
  },
  "初始化 semi 页面带 Modal": {
    "scope": "typescript,typescriptreact",
    "prefix": "semi-modal",
    "body": [
      "import React, { useRef, useState } from 'react';",
      "import { Page, Query, Table } from '@/components';",
      "import { usePagination } from '@/hooks';",
      "import { Button, Form, Modal, Popconfirm } from '@douyinfe/semi-ui';",
      "import { FormApi } from '@douyinfe/semi-ui/lib/es/form';",
      "import { ColumnProps } from '@douyinfe/semi-ui/lib/es/table';",
      "import { useNavigate } from '@edenx/runtime/router';",
      "import { useRequest } from 'ahooks';",
      "import dayjs from 'dayjs';",
      "",
      "const { RadioGroup, Radio, Select, Input } = Form;",
      "",
      "type Props = {",
      "  test: string;",
      "};",
      "",
      "type Item = {",
      "  name: number;",
      "  version: string;",
      "  category: string;",
      "  status: string;",
      "  createTime: string;",
      "  creator: string;",
      "};",
      "",
      "const mockData = Array.from(Array(15).fill(0)).map((_, i) => ({",
      "  name: i + 1,",
      "  version: '1.0.i',",
      "  category: '发布中',",
      "  status: '三灰',",
      "  createTime: Date.now().toString(),",
      "  creator: '李小龙',",
      "}));",
      "",
      "const getData = ({",
      "  currentPage,",
      "  pageSize,",
      "}: {",
      "  currentPage: number;",
      "  pageSize: number;",
      "}): Promise<{ list: Item[]; total: number }> =>",
      "  new Promise(resolve => {",
      "    setTimeout(() => {",
      "      const res = {",
      "        list: mockData.slice((currentPage - 1) * pageSize, currentPage * pageSize),",
      "        total: mockData.length,",
      "      };",
      "      resolve(res);",
      "    }, 1000);",
      "  });",
      "",
      "const App: React.FC<Props> = ({}) => {",
      "  const [query, setQuery] = useState<Query>();",
      "  const pagination = usePagination([query]);",
      "  const { currentPage, pageSize } = pagination;",
      "  const [addModalVisible, setAddModalVisible] = useState(false);",
      "  const [adding, setAdding] = useState(false);",
      "  const queryFormApi = useRef<FormApi>();",
      "  const addFormApi = useRef<FormApi>();",
      "  const navigate = useNavigate();",
      "",
      "  const { data, loading, run } = useRequest(() => getData({ pageSize, currentPage }), {",
      "    refreshDeps: [currentPage, pageSize, query],",
      "  });",
      "",
      "  const handleOk = async () => {",
      "    await addFormApi.current?.validate();",
      "    setAdding(true);",
      "    // await request(",
      "    //   addFormApi.current?.getValues(),",
      "    // ).finally(() => setAdding(false));",
      "    setAdding(false);",
      "    setAddModalVisible(false);",
      "    run();",
      "  };",
      "",
      "  const edit = async (row: Item) => {};",
      "",
      "  const handleDelete = async (row: Item) => {};",
      "",
      "  const columns: ColumnProps<Item>[] = [",
      "    {",
      "      title: '宿主',",
      "      dataIndex: 'name',",
      "    },",
      "    {",
      "      title: '宿主版本',",
      "      dataIndex: 'version',",
      "    },",
      "    {",
      "      title: '分类',",
      "      dataIndex: 'category',",
      "    },",
      "    {",
      "      title: '状态',",
      "      dataIndex: 'status',",
      "    },",
      "    {",
      "      title: '创建时间',",
      "      render: (_, row) => dayjs(row.createTime).format('YYYY-MM-DD HH:mm'),",
      "    },",
      "    {",
      "      title: '创建人',",
      "      dataIndex: 'creator',",
      "    },",
      "    {",
      "      title: '操作',",
      "      fixed: 'right',",
      "      width: 250,",
      "      render: (_, row) => (",
      "        <div className=\"flex gap-3\">",
      "          <Button theme=\"solid\" onClick={() => navigate('')}>",
      "            跳转",
      "          </Button>",
      "          <Button theme=\"solid\" onClick={() => edit(row)}>",
      "            编辑",
      "          </Button>",
      "          <Popconfirm title=\"确认要删除吗？\" onConfirm={() => handleDelete(row)}>",
      "            <Button>删除</Button>",
      "          </Popconfirm>",
      "        </div>",
      "      ),",
      "    },",
      "  ];",
      "",
      "  return (",
      "    <Page title=\"测试页面\">",
      "      <header className=\"flex justify-between\">",
      "        <Form",
      "          getFormApi={formApi => (queryFormApi.current = formApi)}",
      "          layout=\"horizontal\"",
      "          labelPosition=\"left\"",
      "          onValueChange={value => setQuery(value)}",
      "          className=\"flex gap-10\"",
      "        >",
      "          <Select field=\"app\" label=\"宿主\" rules={[{ required: true, message: '请选择宿主' }]} className=\"w-full\">",
      "            <Select.Option value={0}>抖音</Select.Option>",
      "            <Select.Option value={1}>抖极</Select.Option>",
      "            <Select.Option value={2}>抖音、极速</Select.Option>",
      "          </Select>",
      "        </Form>",
      "        <Button theme=\"solid\" onClick={() => setAddModalVisible(true)}>",
      "          新增版本",
      "        </Button>",
      "      </header>",
      "      <Table",
      "        className=\"mt-5\"",
      "        loading={loading}",
      "        dataSource={data?.list}",
      "        columns={columns}",
      "        total={data?.total}",
      "        pagination={pagination}",
      "      />",
      "      <Modal",
      "        title=\"新增版本\"",
      "        visible={addModalVisible}",
      "        onOk={handleOk}",
      "        onCancel={() => setAddModalVisible(false)}",
      "        closeOnEsc",
      "        okButtonProps={{ loading: adding }}",
      "      >",
      "        <Form initValues={{}} getFormApi={formApi => (addFormApi.current = formApi)}>",
      "          <Select field=\"app\" label=\"宿主\" rules={[{ required: true, message: '请选择宿主' }]} className=\"w-full\">",
      "            <Select.Option value={0}>抖音</Select.Option>",
      "            <Select.Option value={1}>抖极</Select.Option>",
      "            <Select.Option value={2}>抖音、极速</Select.Option>",
      "          </Select>",
      "          <Input field=\"version\" label=\"版本\" rules={[{ required: true, message: '请输入版本' }]} />",
      "          <RadioGroup field=\"category\" label=\"分类\">",
      "            <Radio value={1}>小程序</Radio>",
      "            <Radio value={2}>小游戏</Radio>",
      "          </RadioGroup>",
      "        </Form>",
      "      </Modal>",
      "    </Page>",
      "  );",
      "};",
      "",
      "export default App;",
      ""
    ]
  }
}
